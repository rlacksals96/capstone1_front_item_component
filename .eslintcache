[{"/Users/Chanmin/Desktop/Programming/js/capstone_item/src/reportWebVitals.js":"1","/Users/Chanmin/Desktop/Programming/js/capstone_item/src/App.js":"2","/Users/Chanmin/Desktop/Programming/js/capstone_item/src/MusicPlayer.js":"3","/Users/Chanmin/Desktop/Programming/js/capstone_item/src/Timer.js":"4","/Users/Chanmin/Desktop/Programming/js/capstone_item/src/Todo.js":"5","/Users/Chanmin/Desktop/Programming/js/capstone_item/src/TodoList.js":"6","/Users/Chanmin/Desktop/Programming/js/capstone_item/src/Container.js":"7","/Users/Chanmin/Desktop/Programming/js/capstone_item/src/index.js":"8","/Users/Chanmin/Desktop/Programming/js/capstone_item/src/TodoInfo.js":"9"},{"size":362,"mtime":1607743325774,"results":"10","hashOfConfig":"11"},{"size":4047,"mtime":1607845286700,"results":"12","hashOfConfig":"11"},{"size":430,"mtime":1607829748076,"results":"13","hashOfConfig":"11"},{"size":5672,"mtime":1607847845008,"results":"14","hashOfConfig":"11"},{"size":1446,"mtime":1607829748080,"results":"15","hashOfConfig":"11"},{"size":594,"mtime":1607829748084,"results":"16","hashOfConfig":"11"},{"size":4197,"mtime":1607905259984,"results":"17","hashOfConfig":"11"},{"size":542,"mtime":1607905462326,"results":"18","hashOfConfig":"11"},{"size":1810,"mtime":1607829748083,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"e2mft2",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Chanmin/Desktop/Programming/js/capstone_item/src/reportWebVitals.js",[],["42","43"],"/Users/Chanmin/Desktop/Programming/js/capstone_item/src/App.js",[],"/Users/Chanmin/Desktop/Programming/js/capstone_item/src/MusicPlayer.js",[],["44","45"],"/Users/Chanmin/Desktop/Programming/js/capstone_item/src/Timer.js",["46","47","48"],"import React, { Component } from 'react';\nimport './Timer.css';\nimport {Button} from 'react-bootstrap'\n\nlet countdown;\nlet pause;\n\nconst initialState = {\n  leftTime: \"1:00\",\n  breakTime: 5,\n  sessionTime: 1,\n  isPaused: true,\n  isSession: true\n};\n\n\n// Time management helper functions\n\nconst minsToSeconds = mins => mins * 60;\n\nconst secondsToMins = seconds => {\n  let minutes = Math.floor(seconds / 60);\n  seconds = (seconds % 60).toFixed(0);\n  return (\n    (minutes < 10 ? \"0\" : \"\") +\n    minutes +\n    \":\" +\n    (seconds < 10 ? \"0\" : \"\") +\n    seconds\n  );\n};\n\nconst minsAndSecondsToSeconds = mins => {\n  const time = mins.split(\":\");\n  const seconds = Math.floor(+time[0] * 60 + +time[1]);\n  return seconds;\n};\n\n\n// Components\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    this.handleReset = this.handleReset.bind(this);\n    this.handleStartPause = this.handleStartPause.bind(this);\n    this.handleControls = this.handleControls.bind(this);\n    this.timer = this.timer.bind(this);\n  }\n\n  timer(seconds) {\n    const now = Date.now();\n    const then = now + seconds * 1000 + 1;\n\n    countdown = setInterval(() => {\n      const secondsLeft = Math.round((then - Date.now()) / 1000);\n      if (secondsLeft < 1) {\n        let isSession = this.state.isSession;\n        let curTime;\n        if (isSession) {\n          isSession = false;\n          this.setState({ isSession });\n          curTime = this.state.breakTime;\n        } else {\n          isSession = true;\n          this.setState({ isSession });\n          curTime = this.state.sessionTime;\n        }\n        this.audioBeep.play();\n        clearInterval(countdown);\n        this.timer(minsToSeconds(curTime));\n      }\n      const converted = secondsToMins(secondsLeft);\n      this.setState({\n        leftTime: converted\n      });\n    }, 1000);\n  }\n\n  handleReset() {\n    clearInterval(countdown);\n    pause = \"\";\n    this.audioBeep.pause();\n    this.audioBeep.currentTime = 0;\n    this.setState(initialState);\n  }\n\n  handleStartPause() {\n    let curTime;\n    if (this.state.isPaused) {\n      if (pause) {\n        curTime = pause;\n        this.timer(minsAndSecondsToSeconds(curTime));\n        pause = \"\";\n      } else {\n        curTime = this.state.sessionTime;\n        this.timer(minsToSeconds(curTime));\n      }\n      this.setState({\n        isPaused: false\n      });\n    } else {\n      pause = this.state.leftTime;\n      clearInterval(countdown);\n      this.setState({\n        isPaused: true\n      });\n    }\n  }\n\n  handleControls(e) {\n    const id = e.target.id;\n    let breakTime = this.state.breakTime;\n    let sessionTime = this.state.sessionTime;\n\n    switch (id) {\n      case \"break-increment\":\n        breakTime++;\n        break;\n      case \"break-decrement\":\n        breakTime--;\n        break;\n      case \"session-increment\":\n        sessionTime++;\n        break;\n      case \"session-decrement\":\n        sessionTime--;\n        break;\n    }\n    if (\n      breakTime < 1 ||\n      sessionTime < 1 ||\n      breakTime > 25 ||\n      sessionTime > 60\n    ) {\n      return;\n    }\n    const leftTime = secondsToMins(sessionTime * 60);\n    if(!countdown){\n      this.setState({\n      leftTime\n    });\n    }\n    this.setState({\n      breakTime,\n      sessionTime\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"pomodoro\">{/* \n        <MrPomodoro isSession={this.state.isSession} /> */}\n        <Display\n          isSession={this.state.isSession}\n          isPaused={this.state.isPaused}\n          leftTime={this.state.leftTime}\n          startPause={this.handleStartPause}\n          reset={this.handleReset}\n        />\n        <div id=\"control-block\">\n          <Break\n            controls={this.handleControls}\n            breakTime={this.state.breakTime}\n          />\n          <Session\n            controls={this.handleControls}\n            sessionTime={this.state.sessionTime}\n          />\n        </div>\n        <audio\n          id=\"beep\"\n          preload=\"auto\"\n          src=\"https://notificationsounds.com/notification-sounds/piece-of-cake-611\"\n          ref={audio => {\n            this.audioBeep = audio;\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nconst MrPomodoro = props => (\n  <div>\n    <img\n      id=\"mrpomodoro\"\n      title=\"Icon made by Freepik\"\n      src={\n        props.isSession\n          ? \"https://goo.gl/TtXs88\"\n          : \"https://goo.gl/kVKA9e\"\n      }\n    />\n  </div>\n);\n\nconst Display = props => (\n  <div id=\"display\">\n    <div id=\"timer-label\">\n      {props.isSession ? \"Be productive!\" : \"Time for a break!\"}\n    </div>\n    <div id=\"time-left\">{props.leftTime}</div>\n    <Button id=\"start_stop\" onClick={props.startPause}>\n      {props.isPaused ? \"Start\" : \"Stop\"}\n    </Button>\n    <Button id=\"reset\" onClick={props.reset}>\n      Reset\n    </Button>\n  </div>\n);\n\nconst Break = props => (\n  <div id=\"break\">\n    <p id=\"break-label\">Break Length</p>\n    <div className=\"controls\">\n      <Button onClick={props.controls} id=\"break-decrement\">\n        &#8722;\n      </Button>\n      <p className=\"time\" id=\"break-length\">\n        {props.breakTime}\n      </p>\n      <Button onClick={props.controls} id=\"break-increment\">\n        &#43;\n      </Button>\n    </div>\n  </div>\n);\n\nconst Session = props => (\n  <div id=\"session\">\n    <p id=\"session-label\">Session Length</p>\n    <div className=\"controls\">\n      <Button onClick={props.controls} id=\"session-decrement\">\n        &#8722;\n      </Button>\n      <p className=\"time\" id=\"session-length\">\n        {props.sessionTime}\n      </p>\n      <Button onClick={props.controls} id=\"session-increment\">\n        &#43;\n      </Button>\n    </div>\n  </div>\n);\n\nexport default Timer;",["49","50"],"/Users/Chanmin/Desktop/Programming/js/capstone_item/src/Todo.js",[],"/Users/Chanmin/Desktop/Programming/js/capstone_item/src/TodoList.js",[],"/Users/Chanmin/Desktop/Programming/js/capstone_item/src/Container.js",[],"/Users/Chanmin/Desktop/Programming/js/capstone_item/src/index.js",[],"/Users/Chanmin/Desktop/Programming/js/capstone_item/src/TodoInfo.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"51","replacedBy":"55"},{"ruleId":"53","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":117,"column":5,"nodeType":"59","messageId":"60","endLine":130,"endColumn":6},{"ruleId":"61","severity":1,"message":"62","line":185,"column":7,"nodeType":"63","messageId":"64","endLine":185,"endColumn":17},{"ruleId":"65","severity":1,"message":"66","line":187,"column":5,"nodeType":"67","endLine":195,"endColumn":7},{"ruleId":"51","replacedBy":"68"},{"ruleId":"53","replacedBy":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],["70"],["71"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'MrPomodoro' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["70"],["71"],"no-global-assign","no-unsafe-negation"]